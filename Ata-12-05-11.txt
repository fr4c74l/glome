Ata reunião Navgina Project 11/05/2011

 Presentes:
Lucas
 Rodrigo, 
Thiago 

Naves e Rodrigo Saramargo. Ausentes: Leonardo Alt.

 

Assuntos discutidos:

1) GPL ou FreeBSD? 
O problema é que algumas plataformas possuem API fechada e só distribuem o binário, como é o caso da PSN, 
e para distribuir nosso software nela, não poderíamos coloca-lo sob GPL. Uma solução seria coloca-lo sob a licença BSD, o que manteria o software 
como open source, porem permitiria fecha-lo para distribui-lo na PSN, fecha-lo no sentido, da pessoa que baixar na PSN apenas baixar o binário, 
e quando ela baixar do nosso site, o fonte, este não irá conter os códigos fechados da API que não nos pertence.


Questões relevantes a se discutir: a freebsd aumentaria nosso mercado, pq não é só a PSN que faz isso, porem permitiríamos que alguem pegue o nosso 
código, o feche e revenda, continuaríamos como autores, porem fora o muito obrigado, nada teríamos a ver com isso. Nossa engine 4D (E4D ou 4DE) poderia ser 
copiada por alguem e usada em um software fechado, sem nenhum problema e nenhuma ligação nossa. De uma forma estaríamos dando o 
código para fazerem o que quiserem, e tb poderemos fazer o que quisermos. Com a GPL perderíamos opções de mercado e distribuição, 
mas poderíamos aceitar colaborações externas e implementá-las na raiz do jogo, o que na BSD so é possível se a pessoa que desenvolver 
o MOD ou o que for, coloca-lo na BSD tb, pois não é possível colocar trecho em GPL na BSD, mas o contrario é válido.

2) 

Como faremos?

Repositório, será usado o gitorious e o git
interface com o S.O = SDL, talvez openAL pro audio 3D
4D Engine e Game Engine = OpenGl, 
C++(fracamente OO)
Arte = Blender, Gimp, Mypait, e qq outro open source q precisar

3) 

Pra quais plataformas?

a primeira versão deve funcionar em PC/Linux

4) 

O que fazer primeiro?

Definir dimensões para os objetos, o mundo tem Raio 1(tamanho total de 2pi radianos) e 
a nave deve demorar algo em torno de 30+ segundos para dar uma volta.
Modelos das naves no blender (lowpoly)
Exportar modelos para um 
arquivo binário, LittleEndian, no formato já definido, e incrementar o exportador para efeitos especiais e o que mais for preciso, caso 
seja preciso, com base na Blender Python API.
Definir classe dos objetos móveis
As naves devem "andar" pelo cenário e não o contraio 
como acontece
Ajustar a câmera do jogo, a nave vira um pouco e depois a câmera segue, para dar sensação de movimento
Estudar álgebra 
linear e o código já existente e entende-lo.
Fazer a nave atirar
Colocar 2 naves no cenário
Jogar em rede 1 contra a outra
.


Sugestões para o gameplay do jogo:

1 - O jogo pode conter dois modos de jogo, o primeiro seria realizar uma quantidade de fases (quests) onde poderiamos explorar bem os 
desafios do ambiente 4D, com uma fase onde o o bejtivo é destruir todos os inimigos, a próxima seria ajudar uma equipe a destruir objetos
presentes no espaço como meteoros e asteroides, outra poderia ser uma corrida onde o objetivo é contornar o espaço 4D entre dois pontos. 
E o segundo modo de jogo seria um single palyer simples, onde o jogado escolheria os tipos de objetos presentes na fase, como naves e 
meteoros e iria jogar para destruir esses, apenas como um modo de jogo para diversão rápida.